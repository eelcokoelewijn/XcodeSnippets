{
  "scopes" : [
    "TopLevel"
  ],
  "summary" : "View containing label with button vertical aligned",
  "userSnippet" : true,
  "title" : "View containing label with button",
  "completionPrefix" : "swift_view-with-label-button",
  "language" : "Xcode.SourceCodeLanguage.Swift",
  "contents" : "final class <#view-class-name#>: UIView {\n\t    override init(frame: CGRect) {\n\t        super.init(frame: frame)\n\t        setupViews()\n\t        applyViewConstraints()\n\t    }\n\t\n\t    required init?(coder aDecoder: NSCoder) {\n\t        fatalError(\"init(coder:) has not been implemented\")\n\t    }\n\t\n\t    func set(label text: String, button title: String) {\n\t        _label.text = text\n\t        _button.setTitle(title, for: .normal)\n\t    }\n\t\n        func buttonAdd(target: Any?, action: Selector) {\n\t        _button.addTarget(target, action: action, for: .touchUpInside)\n\t    }\n\t\n\t    private func setupViews() {\n\t        backgroundColor = .white\n\t        addSubview(_label)\n\t        addSubview(_button)\n\t    }\n\t\n\t    private func applyViewConstraints() {\n\t        let views: [String: Any] = [\"label\": _label, \"button\": _button]\n\t        NSLayoutConstraint.activate(NSLayoutConstraint.constraints(withVisualFormat: \"H:|-[label]-|\",\n\t                                                                   options: [],\n\t                                                                   metrics: nil,\n\t                                                                   views: views))\n\t        NSLayoutConstraint.activate(NSLayoutConstraint.constraints(withVisualFormat: \"H:|-[button]-|\",\n\t                                                                   options: [],\n\t                                                                   metrics: nil,\n\t                                                                   views: views))\n\t        NSLayoutConstraint.activate(NSLayoutConstraint.constraints(withVisualFormat: \"V:|-15-[label]-[button]-(>=15)-|\",\n\t                                                                   options: [],\n\t                                                                   metrics: nil,\n\t                                                                   views: views))\n\t    }\n    \n    private let _label: UILabel = {\n        let view = UILabel()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        view.numberOfLines = 0\n        view.lineBreakMode = .byWordWrapping\n        view.accessibilityIdentifier = \".label\"\n        return view\n    }()\n    private let _button: UIButton = {\n        let view = UIButton(type: .roundedRect)\n        view.layer.cornerRadius = 5\n        view.layer.borderWidth = 1\n        view.layer.borderColor = UIColor.black.cgColor\n        view.setTitleColor(.black, for: .normal)\n        view.translatesAutoresizingMaskIntoConstraints = false\n        view.accessibilityIdentifier = \"<#view-class-name#>.button\"\n        return view\n    }()    \n}\n\t",
  "identifier" : "DAEB3AAA-E7AC-436F-9BC7-6254EE19DFC8",
  "version" : 2
}