{
  "scopes" : [
    "TopLevel"
  ],
  "summary" : "Vertical or horizontal scrolling view, with content view wrapped inside scroll view.",
  "userSnippet" : true,
  "title" : "View with scrollable content",
  "completionPrefix" : "swift_view-scrollable-content",
  "language" : "Xcode.SourceCodeLanguage.Swift",
  "contents" : "import UIKit\n\nfinal class <#ViewName#>: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n        applyViewConstraints()\n        applyContentViewConstraints()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func set(label text: String) {\n        _label.text = text\n    }\n    \n    private lazy var _label: UILabel = {\n        let view = UILabel()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        view.lineBreakMode = .byWordWrapping\n        view.numberOfLines = 0\n        view.accessibilityIdentifier = \"<#ViewName#>.label\"\n        return view\n    }()\n    private let _scrollView: UIScrollView = {\n        let view = UIScrollView()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        view.accessibilityIdentifier = \"<#ViewName#>.scrollView\"\n        return view\n    }()\n    private lazy var _contentView: UIView = {\n        let view = UIView()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        return view\n    }()    \n}\n\nprivate extension <#ViewName#> {\n    func setupViews() {\n        addSubview(_scrollView)\n        scrollView.addSubview(_contentView)\n        contentView.addSubview(_label)\n    }\n\n    func applyViewConstraints() {\n        let contentViewWidthConstraint = _contentView.widthAnchor.constraint(equalTo: _scrollView.frameLayoutGuide.widthAnchor)\n        \/\/ contentViewWidthConstraint.priority = UILayoutPriority(rawValue: 250) \/\/ horizontal scroll\n        let contentViewHeightConstraint = _contentView.heightAnchor.constraint(equalTo: _scrollView.frameLayoutGuide.heightAnchor)\n        contentViewHeightConstraint.priority = UILayoutPriority(rawValue: 250) \/\/ vertical scroll\n        NSLayoutConstraint.activate([\n            _scrollView.topAnchor.constraint(equalTo: topAnchor),\n            _scrollView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            _scrollView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            _scrollView.bottomAnchor.constraint(equalTo: bottomAnchor),\n            contentViewWidthConstraint,\n            contentViewHeightConstraint,\n            _contentView.topAnchor.constraint(equalTo: _scrollView.contentLayoutGuide.topAnchor),\n            _contentView.leadingAnchor.constraint(equalTo: _scrollView.contentLayoutGuide.leadingAnchor),\n            _contentView.trailingAnchor.constraint(equalTo: _scrollView.contentLayoutGuide.trailingAnchor),\n            _contentView.bottomAnchor.constraint(equalTo: _scrollView.contentLayoutGuide.bottomAnchor)\n        ])\n    }\n\n    func applyContentViewConstraints() {\n        let views: [String: Any] = [\"label\": _label]\n        let metrics: [String: CGFloat] = [:]\n        NSLayoutConstraint.activate(NSLayoutConstraint.constraints(withVisualFormat: \"H:|-[label]-|\",\n                                                                   options: [],\n                                                                   metrics: metrics,\n                                                                   views: views))\n        NSLayoutConstraint.activate(NSLayoutConstraint.constraints(withVisualFormat: \"V:|-[label]-|\",\n                                                                   options: [],\n                                                                   metrics: metrics,\n                                                                   views: views))\n    }\n}\n",
  "identifier" : "8E87D595-00ED-4300-934C-81199B5911CC",
  "version" : 2
}